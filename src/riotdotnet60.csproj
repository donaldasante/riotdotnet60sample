<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
     <IsPackable>true</IsPackable>
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
    <NoDefaultExcludes>true</NoDefaultExcludes>
    <EnableDefaultContentItems>false</EnableDefaultContentItems>
	<ContainerDevelopmentMode>Regular</ContainerDevelopmentMode>
  </PropertyGroup>

  <PropertyGroup>
    <SpaRoot>ClientApp\</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
    <PackageId>riot.dotnet.six</PackageId>
    <PackageType>Template</PackageType>
    <Authors>Donald Asante</Authors>
    <RepositoryUrl>https://github.com/donaldasante/riotdotnetsample.git</RepositoryUrl>
    <PackageProjectUrl>https://github.com/donaldasante/riotdotnetsample</PackageProjectUrl>
    <Description>ASP.NET Core 6.x with Riot.js 6.x</Description>
    <Product>ASP.NET Core 6.x with Riot.js 6.x</Product>
    <PackageTags>Web,API,SPA,Riot.js</PackageTags>
    <IncludeContentInPack>true</IncludeContentInPack>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <ContentTargetFolders>content</ContentTargetFolders>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageLicenseFile>license.txt</PackageLicenseFile>
    <PackageIcon>images\pic1.png</PackageIcon>
	<DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
  </PropertyGroup>
  
  <PropertyGroup>
    <VersionMajor>1</VersionMajor>
    <VersionMinor>0</VersionMinor>
    <VersionBuild>0</VersionBuild>
  </PropertyGroup>

  <PropertyGroup>
    <VersionPrefix Condition=" '$(BUILD_BUILDNUMBER)' == '' ">$(VersionMajor).$(VersionMinor).$(VersionBuild)-local</VersionPrefix>
    <VersionPrefix Condition=" '$(BUILD_BUILDNUMBER)' != '' And '$(buildConfiguration)' == 'Debug'">$(VersionMajor).$(VersionMinor).$(VersionBuild)-$(BUILD_BUILDNUMBER)-preview</VersionPrefix>
    <VersionPrefix Condition=" '$(buildConfiguration)' == 'Release'">$(VersionMajor).$(VersionMinor).$(VersionBuild)</VersionPrefix>
    <DockerfileContext>.</DockerfileContext>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\README.md" Pack="true" PackagePath="$(PackageReadmeFile)" />
    <None Include="..\license.txt" Pack="true" PackagePath="$(PackageLicenseFile)" />
    <None Include="..\images\pic3.png" Pack="true" PackagePath="$(PackageIcon)" />
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>
  

  <ItemGroup>
    <Content Include="**\*" Exclude="bin\**;obj\**;.vs\**;wwwroot\**;ClientApp\public\**;ClientApp\node_modules\**;" />
    <Compile Remove="**\*" />
  </ItemGroup>
  

  <ItemGroup>
    <Content Remove="Contracts\Requests\WeatherForecastRequest.cs" />
    <Content Remove="Contracts\Responses\WeatherForecastResponse.cs" />
    <Content Remove="Contracts\Responses\WeatherForecastsResponse.cs" />
    <Content Remove="Endpoints\WeatherForecastEndpoint.cs" />
    <Content Remove="Mappers\WeatherForecastMapper.cs" />
    <Content Remove="Program.cs" />
    <Content Remove="Validators\WeatherForecastRetrievalValidator.cs" />
    <Content Remove="WeatherForecast.cs" />
  </ItemGroup>
  

  <ItemGroup>
    <Compile Include="Contracts\Requests\WeatherForecastRequest.cs" />
    <Compile Include="Contracts\Responses\WeatherForecastResponse.cs" />
    <Compile Include="Contracts\Responses\WeatherForecastsResponse.cs" />
    <Compile Include="Endpoints\WeatherForecastEndpoint.cs" />
    <Compile Include="Mappers\WeatherForecastMapper.cs" />
    <Compile Include="Program.cs" />
    <Compile Include="Model\WeatherForecast.cs" />
    <Compile Include="Validators\WeatherForecastRetrievalValidator.cs" />
  </ItemGroup>  

  <ItemGroup>
    <PackageReference Include="FastEndpoints" Version="3.10.0" />
    <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.14.0" />
    <PackageReference Include="VueCliMiddleware" Version="3.1.2" />
  </ItemGroup>
  
  <ItemGroup>
    <Folder Include="ClientApp\" />
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build">
    <!-- Build Target:  Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Exec Command="npm --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js and npm are required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
  </Target>

  <Target Name="EnsureNodeModulesInstalled" BeforeTargets="Build" Inputs="package.json" Outputs="packages-lock.json" Condition="!Exists('$(SpaRoot)node_modules')">
    <!-- Build Target: Restore NPM packages using npm -->
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- Build Target: Run webpack dist build -->
    <Message Importance="high" Text="Running npm build..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build" />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)public\**" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <ExcludeFromSingleFile>True</ExcludeFromSingleFile>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>  
</Project>
